# config/packages/security.yaml
security:
    enable_authenticator_manager: true
    
    password_hashers:
        App\Entity\User: 'auto'
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'auto'
            cost:      15

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        login:
            pattern: ^/api/auth
            stateless: true
            provider: app_user_provider
            json_login:
                username_path: email
                check_path: /api/auth
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

    access_control:
        - { path: ^/api/auth, roles: PUBLIC_ACCESS }
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/posts$, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }


when@test:
    security:
        password_hashers:

            App\Entity\User:
                algorithm: auto
                # cost: 4 # Lowest possible value for bcrypt
                # time_cost: 3 # Lowest possible value for argon
                # memory_cost: 10 # Lowest possible value for argon

            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
